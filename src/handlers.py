import asyncio
import os

from aiogram import Dispatcher, Router, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.types import (
    Message,
    CallbackQuery,
    FSInputFile, InlineKeyboardButton, InlineKeyboardMarkup,
)

from src.keyboards import menu_inline_keyboard
from src.service import (
    get_name_by_telegram_username,
    edit_message,
    get_id_by_telegram_username,
    get_receiver_name, get_hero, get_free_heroes, create_hero_inline_keyboard, hero_is_free, set_hero_to_user,
)

router = Router()


@router.message(Command("start"))
async def cmd_start(message: Message):
    try:
        name = await get_name_by_telegram_username(message.from_user.username)
    except ValueError:
        await message.answer(
            "–¢–µ–±—è –ø–æ—á–µ–º—É-—Ç–æ –Ω–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö(\n–ù–∞–ø–∏—à–∏ –æ–± —ç—Ç–æ–º –¢–∏–º–æ—Ö–µ!"
        )
        return
    answer = (
        f"üéÖ –ü—Ä–∏–≤–µ—Ç, –º–æ–π –¥–æ—Ä–æ–≥–æ–π <b>{name}</b>!\n\n"
        f"–ù–∞ –Ω–æ—Å—É —É–∂–µ <b>–ù–æ–≤—ã–π –ì–æ–¥</b>! –î–∞-–¥–∞ –æ—Å—Ç–∞–ª–æ—Å—å —Å–æ–≤—Å–µ–º –Ω–∏—á–µ–≥–æ...\n"
        f"–ù–∞—Å—Ç–∞–ª–æ –≤—Ä–µ–º—è –≥–æ—Ç–æ–≤–∏—Ç—å –ø–æ–¥–∞—Ä–æ—á–∫–∏ –ì–µ–π–ö–ª–∞–±—É) üéÅ\n"
        f"–ê —Ç–∞–∫–∂–µ –Ω—É–∂–Ω–æ –ø—Ä–∏–≥–æ—Ç–æ–≤–∏—Ç—å—Å—è –∫ –µ–±–∞–Ω—É—Ç–æ-–≤–µ—Å–µ–ª–æ–º—É –∫–æ—Å–ø–ª–µ—é) üé©"
    )
    await message.answer(answer)
    await asyncio.sleep(5)
    await menu(event=message)


@router.message(Command("menu"))
async def cmd_menu(message: Message):
    await menu(event=message)


@router.callback_query(F.data == "menu")
@edit_message
async def menu_callback(callback: CallbackQuery):
    await menu(event=callback)


@router.message(F.text == "üìã –ú–µ–Ω—é")
async def menu_message(message: Message):
    await menu(event=message)


async def menu(event):
    tg_username = event.from_user.username
    if isinstance(event, CallbackQuery):
        await event.answer()

    try:
        name = await get_name_by_telegram_username(tg_username)
        id_ = await get_id_by_telegram_username(tg_username)
    except ValueError as e:
        print("Exc menu:", e)
        return

    answer = (
        f"–Ø –≤–∏–∂—É, —Ç—ã –≤ —ç—Ç–æ–º –≥–æ–¥—É –æ—á–µ–Ω—å –∂–µ—Å—Ç–∫–æ –ø–æ–¥–∫–∞—á–∞–ª—Å—è, —Ö–ª–æ–ø—á–∏–∫! üéÖ\n\n"
        f"–ü–æ—ç—Ç–æ–º—É —Ç—ã –≤ —ç—Ç–æ–º –≥–æ–¥—É –∑–∞—Å–ª—É–∂–∏–≤–∞–µ—à—å –ø–æ–¥–∞—Ä–æ—á–∫–∞ –æ—Ç –°–∞–Ω—Ç—ã.\n"
        f"–ù–æ —Ç–µ–±–µ –Ω–∞–¥–æ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —á—Ç–æ-—Ç–æ –ø–æ–¥–∞—Ä–∏—Ç—å —Å–≤–æ–µ–º—É –∫–µ–Ω—Ç—É! üéÅ\n\n"
        f"–í–µ–ª–∏–∫–∏–π –∏ —É–∂–∞—Å–Ω—ã–π <b>{name}</b>, –≤—ã–±–µ—Ä–∏ –∫–Ω–æ–ø–∫—É!"
    )

    image_path = os.path.join("data", f"{id_}.png")

    if not os.path.isfile(image_path):
        await event.answer("–ò–∑–≤–∏–Ω–∏—Ç–µ, –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        return

    photo = FSInputFile(image_path)

    if isinstance(event, CallbackQuery):
        await event.message.answer_photo(
            photo=photo, caption=answer, reply_markup=menu_inline_keyboard
        )
    elif isinstance(event, Message):
        await event.answer_photo(
            photo=photo, caption=answer, reply_markup=menu_inline_keyboard
        )


@router.callback_query(F.data == "gift")
async def gift_callback(callback: CallbackQuery):
    name = await get_receiver_name(callback.from_user.username)
    message = await callback.message.answer(
        f"üéØ –¢–≤–æ—è —Ü–µ–ª—å: <u><b>{name}</b></u>\n\n"
        f"<i>–°–æ–æ–±—â–µ–Ω–∏–µ —É–¥–∞–ª–∏—Ç—Å—è —á–µ—Ä–µ–∑ 5 —Å–µ–∫</i>"
    )
    await callback.answer()
    await asyncio.sleep(5)
    await message.delete()


@router.callback_query(F.data == "cosplay-menu")
async def gift_callback(callback: CallbackQuery):
    try:
        name = await get_hero(callback.from_user.username)
    except ValueError:
        return
    await callback.answer()
    if name:
        message = await callback.message.answer(
            f"üéØ –¢–≤–æ—è –≥–µ—Ä–æ–π: <u><b>{name}</b></u>\n\n"
            f"<i>–°–æ–æ–±—â–µ–Ω–∏–µ —É–¥–∞–ª–∏—Ç—Å—è —á–µ—Ä–µ–∑ 5 —Å–µ–∫</i>"
        )
        await asyncio.sleep(5)
        await message.delete()
    else:
        heroes = await get_free_heroes(callback.from_user.username)
        inline_keyboard = create_hero_inline_keyboard(heroes)
        inline_keyboard.inline_keyboard.append(
            [InlineKeyboardButton(text="üìã –ú–µ–Ω—é", callback_data=f"menu")]
        )
        answer = f"<b>–ë—Ä–∞—Ç–∏—à–∫–∞, –≤—ã–±–µ—Ä–∏ –≥–µ—Ä–æ—è –¥–ª—è –∫–æ—Å–ø–ª–µ—è!</b>\n\n" \
                 f"<i>–ü–æ—Å–ø–µ—à–∏, –∞ —Ç–æ –∫—Ç–æ-—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å —Ç–≤–æ–µ–≥–æ –≥–µ—Ä–æ—è</i>"
        await callback.message.answer(answer, reply_markup=inline_keyboard)


@router.callback_query(F.data.startswith("hero_"))
@edit_message
async def collection_detail_callback(
    callback: CallbackQuery,
) -> tuple[str, InlineKeyboardMarkup | None]:
    hero_id = int(callback.data.split("_")[1])

    if not await hero_is_free(hero_id):
        await callback.answer("–ì–µ—Ä–æ–π —É–∂–µ –∑–∞–Ω—è—Ç(")
        return

    await callback.answer()
    await set_hero_to_user(callback.from_user.username, hero_id)

    inline_keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text="üìã –ú–µ–Ω—é", callback_data="menu"),
            ],
        ]
    )

    return "‚úÖ –ü–æ–∑–¥—Ä–∞–≤–ª—è—é, –≤—ã –≤—ã–±—Ä–∞–ª–∏ —Å–≤–æ–µ–≥–æ –≥–µ—Ä–æ—è!", inline_keyboard


def register_handlers(dp: Dispatcher):
    dp.include_router(router)
